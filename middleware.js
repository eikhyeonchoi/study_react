/**
 * Middleware
 * 리덕스 미들웨어는 액션을 디스패치했을 때 리듀서에서 이를 처리하기에 앞서
 * 사전에 지정된 작업들을 실행함 -> 액션과 리듀서 사이의 중간자 역할
 * 
 * 원래 진행 방향 : [액션] -> [리듀서] -> [스토어]
 * 미들웨어 적용 후 진행 방향 : [액션] -> [미들웨어] -> [리듀서] -> [스토어]
 * 
 * 리듀서가 액션을 처리하기 전에 미들웨어가 할 수 있는 작업은 여러 가지가 있다
 * 단순히 log를 짝거나, 액션을 취소하거나 다른액션을 추가하거나 등등 ...
 */
 const loggerMiddleware = store => next => action => {
    // 미들웨어 기본구조
};

/**
 * 미들웨어는 결국 함수를 리턴하는 함수임
 * store는 스토어 인스턴스이며, action은 디스패치된 액션을 가리킴
 * next 파라미터는 함수형태이며 next(action)을 호출하면 그다음 처리해야 할 미들웨어에게 액션을 넘김
 * 만약 그다음 미들웨어 없다면 리듀서에게 액션을 넘김
 */

/**
 * 비동기처리 작업 시 가장 많이 사용하는 미들웨어 
 * redux-chunk
 * Thunk: 특정작업을 나중에 할 수 이도록 미루기 위해 함수형태로 감싼 것
 */
const addOne = x => x + 1;
addOne(1); // 2

// 연산 작업을 미루도록 함수로 감쌌다
const addOneChunk = x => () => addOne(x);

const fn = addOneChunk(1);
setTimeout(() => {
    const value = fn();
    console.log(value);
}, 1000);
